import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../../../store/store';
import classes from './DiscountCoupons.module.css';
import { usePlayerProgression } from '../../../hooks/usePlayerProgression';
import { ProgressionService } from '../../../supabase/services/progressionService';

interface Coupon {
  id: string;
  name: string;
  discount: number;
  cost: number;
  description: string;
  icon: string;
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
}

const AVAILABLE_COUPONS: Coupon[] = [
  {
    id: 'common_5',
    name: '–°–∫–∏–¥–∫–∞ 5%',
    discount: 5,
    cost: 1000,
    description: '–ë–∞–∑–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±–æ–π —Ç–æ–≤–∞—Ä',
    icon: 'üé´',
    rarity: 'common'
  },
  {
    id: 'common_10',
    name: '–°–∫–∏–¥–∫–∞ 10%',
    discount: 10,
    cost: 2500,
    description: '–•–æ—Ä–æ—à–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏',
    icon: 'üéüÔ∏è',
    rarity: 'common'
  },
  {
    id: 'rare_15',
    name: '–°–∫–∏–¥–∫–∞ 15%',
    discount: 15,
    cost: 5000,
    description: '–†–µ–¥–∫–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è —É–º–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫',
    icon: 'üé≠',
    rarity: 'rare'
  },
  {
    id: 'rare_20',
    name: '–°–∫–∏–¥–∫–∞ 20%',
    discount: 20,
    cost: 8000,
    description: '–û—Ç–ª–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ–∫—É–ø–æ–∫',
    icon: 'üèÜ',
    rarity: 'rare'
  },
  {
    id: 'epic_25',
    name: '–°–∫–∏–¥–∫–∞ 25%',
    discount: 25,
    cost: 12000,
    description: '–≠–ø–∏—á–µ—Å–∫–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π',
    icon: 'üíé',
    rarity: 'epic'
  },
  {
    id: 'legendary_30',
    name: '–°–∫–∏–¥–∫–∞ 30%',
    discount: 30,
    cost: 20000,
    description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö',
    icon: 'üëë',
    rarity: 'legendary'
  }
];

const DiscountCoupons: React.FC = () => {
  const { user } = useSelector((state: RootState) => state.user);
  const { playerStats, addCoins } = usePlayerProgression();
  const [purchasedCoupons, setPurchasedCoupons] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadPurchasedCoupons = async () => {
      if (!user?.id) {
        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        const saved = localStorage.getItem('purchasedCoupons');
        setPurchasedCoupons(saved ? JSON.parse(saved) : []);
        setIsLoading(false);
        return;
      }

      try {
        const coupons = await ProgressionService.getUserCoupons(user.id);
        const couponIds = coupons.map(coupon => coupon.coupon_id);
        setPurchasedCoupons(couponIds);
      } catch (error) {
        console.error('Error loading purchased coupons:', error);
        // Fallback –∫ localStorage
        const saved = localStorage.getItem('purchasedCoupons');
        setPurchasedCoupons(saved ? JSON.parse(saved) : []);
      } finally {
        setIsLoading(false);
      }
    };

    loadPurchasedCoupons();
  }, [user?.id]);

  const handlePurchase = async (coupon: Coupon) => {
    if (playerStats.coins >= coupon.cost && !purchasedCoupons.includes(coupon.id)) {
      if (user?.id) {
        try {
          // –ü–æ–∫—É–ø–∞–µ–º –∫—É–ø–æ–Ω —á–µ—Ä–µ–∑ Supabase
          const success = await ProgressionService.purchaseCoupon(
            user.id,
            coupon.id,
            coupon.name,
            coupon.discount,
            coupon.cost,
            coupon.rarity
          );

          if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤
            const newPurchased = [...purchasedCoupons, coupon.id];
            setPurchasedCoupons(newPurchased);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const event = new CustomEvent('couponPurchased', { 
              detail: { 
                coupon,
                remainingCoins: playerStats.coins - coupon.cost
              } 
            });
            window.dispatchEvent(event);
          } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—É–ø–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          }
        } catch (error) {
          console.error('Error purchasing coupon:', error);
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—É–ø–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      } else {
        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        addCoins(-coupon.cost);
        
        const newPurchased = [...purchasedCoupons, coupon.id];
        setPurchasedCoupons(newPurchased);
        localStorage.setItem('purchasedCoupons', JSON.stringify(newPurchased));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const event = new CustomEvent('couponPurchased', { 
          detail: { 
            coupon,
            remainingCoins: playerStats.coins - coupon.cost
          } 
        });
        window.dispatchEvent(event);
      }
    }
  };

  const getRarityClass = (rarity: string) => {
    switch (rarity) {
      case 'common': return classes.common;
      case 'rare': return classes.rare;
      case 'epic': return classes.epic;
      case 'legendary': return classes.legendary;
      default: return classes.common;
    }
  };

  return (
    <div className={classes.couponsContainer}>
      <div className={classes.header}>
        <h2 className={classes.title}>üõí –ú–∞–≥–∞–∑–∏–Ω –ö—É–ø–æ–Ω–æ–≤</h2>
        <div className={classes.playerCoins}>
          <span className={classes.coinIcon}>üí∞</span>
          <span className={classes.coinAmount}>{playerStats.coins.toLocaleString()}</span>
        </div>
      </div>

      <div className={classes.couponsGrid}>
        {AVAILABLE_COUPONS.map(coupon => {
          const isPurchased = purchasedCoupons.includes(coupon.id);
          const canAfford = playerStats.coins >= coupon.cost;
          
          return (
            <div 
              key={coupon.id} 
              className={`${classes.couponCard} ${getRarityClass(coupon.rarity)} ${isPurchased ? classes.purchased : ''}`}
            >
              <div className={classes.couponIcon}>{coupon.icon}</div>
              <div className={classes.couponName}>{coupon.name}</div>
              <div className={classes.couponDescription}>{coupon.description}</div>
              
              <div className={classes.couponFooter}>
                <div className={classes.couponCost}>
                  <span className={classes.costIcon}>üí∞</span>
                  <span>{coupon.cost.toLocaleString()}</span>
                </div>
                
                <button
                  className={`${classes.purchaseButton} ${!canAfford || isPurchased ? classes.disabled : ''}`}
                  onClick={() => handlePurchase(coupon)}
                  disabled={!canAfford || isPurchased}
                >
                  {isPurchased ? '‚úÖ –ö—É–ø–ª–µ–Ω–æ' : canAfford ? '–ö—É–ø–∏—Ç—å' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç'}
                </button>
              </div>
            </div>
          );
        })}
      </div>

      <div className={classes.info}>
        <p>üí° –ö—É–ø–æ–Ω—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏</p>
        <p>üéÆ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã, –ø—Ä–æ–≤–æ–¥—è –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ (+100 –æ–ø—ã—Ç–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)</p>
        <p>üèÜ –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +5000 –º–æ–Ω–µ—Ç!</p>
      </div>
    </div>
  );
};

export default DiscountCoupons;
