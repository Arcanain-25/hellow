import { User, LoginCredentials, RegisterCredentials } from '../../types/common';

// –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö Firebase –∫–ª—é—á–µ–π
export class MockUserService {
  private static USERS_KEY = 'mock_users';
  private static SESSIONS_KEY = 'mock_sessions';

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage
  private static getStoredUsers(): User[] {
    const users = localStorage.getItem(this.USERS_KEY);
    return users ? JSON.parse(users) : [];
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ localStorage
  private static saveUsers(users: User[]): void {
    localStorage.setItem(this.USERS_KEY, JSON.stringify(users));
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async registerUser(credentials: RegisterCredentials): Promise<User> {
    const users = this.getStoredUsers();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = users.find(user => user.email === credentials.email);
    if (existingUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    if (credentials.password !== credentials.confirmPassword) {
      throw new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }

    if (!credentials.agreeToTerms) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    }
    
    const newUser: User = {
      id: Date.now().toString(),
      email: credentials.email,
      name: credentials.name,
      phone: credentials.phone,
      address: credentials.address,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      preferences: {
        newsletter: credentials.subscribeToNewsletter || false,
        notifications: true
      }
    };
    
    users.push(newUser);
    this.saveUsers(users);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const sessions = JSON.parse(localStorage.getItem(this.SESSIONS_KEY) || '{}');
    sessions[newUser.id] = {
      userId: newUser.id,
      loginTime: new Date().toISOString(),
      isActive: true
    };
    localStorage.setItem(this.SESSIONS_KEY, JSON.stringify(sessions));
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', newUser.email);
    return newUser;
  }
  
  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async loginUser(credentials: LoginCredentials): Promise<User> {
    const users = this.getStoredUsers();
    
    const user = users.find(u => u.email === credentials.email);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    // –î–ª—è –¥–µ–º–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const sessions = JSON.parse(localStorage.getItem(this.SESSIONS_KEY) || '{}');
    sessions[user.id] = {
      userId: user.id,
      loginTime: new Date().toISOString(),
      isActive: true
    };
    localStorage.setItem(this.SESSIONS_KEY, JSON.stringify(sessions));
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', user.email);
    return user;
  }
  
  // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async removeUserSession(userId: string): Promise<void> {
    const sessions = JSON.parse(localStorage.getItem(this.SESSIONS_KEY) || '{}');
    delete sessions[userId];
    localStorage.setItem(this.SESSIONS_KEY, JSON.stringify(sessions));
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  static async getAllUsers(): Promise<User[]> {
    return this.getStoredUsers();
  }
  
  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
  static subscribeToUser(userId: string, callback: (user: User | null) => void): () => void {
    const users = this.getStoredUsers();
    const user = users.find(u => u.id === userId);
    callback(user || null);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    return () => {};
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  static async initializeDemoUsers(): Promise<void> {
    const users = this.getStoredUsers();
    
    if (users.length === 0) {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const demoUsers = [
        {
          email: 'admin@example.com',
          password: '123456',
          confirmPassword: '123456',
          name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          phone: '+7 (999) 123-45-67',
          address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
          agreeToTerms: true,
          subscribeToNewsletter: true
        },
        {
          email: 'user@example.com',
          password: '123456',
          confirmPassword: '123456',
          name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          phone: '+7 (999) 765-43-21',
          address: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 2',
          agreeToTerms: true,
          subscribeToNewsletter: false
        }
      ];

      for (const demoUser of demoUsers) {
        try {
          await this.registerUser(demoUser);
        } catch (error) {
          console.log(`–î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${demoUser.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      console.log('‚úÖ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!');
      console.log('üìß Email: admin@example.com, –ø–∞—Ä–æ–ª—å: 123456');
      console.log('üìß Email: user@example.com, –ø–∞—Ä–æ–ª—å: 123456');
    }
  }
}
